---
- name: check to see if {{ var_path }}/server/token file exists
  stat:
    path: "{{ var_path }}/server/token"
  register: token_presence

- block:
  - name: get existing token content of remote file
    slurp:
      src: "{{ var_path }}/server/token"
    register: token_encoded
    when: inventory_hostname in groups['control_plane'][0]

  - name: distribute existing token to nodes
    set_fact:
      token: "{{ token_encoded.content | b64decode | trim }}"
    delegate_to: "{{ item }}"
    with_items: "{{ play_hosts }}"
    run_once: true
  when: token_presence.stat.exists

- block:
  - name: Generate token for clustering
    ansible.builtin.shell:
      cmd: "tr -dc A-Za-z0-9 </dev/urandom | head -c 64 ; echo ''"
    register: token_encoded
    delegate_to: localhost
    ignore_errors: true
    run_once: true

  - name: distribute existing token to nodes
    set_fact:
      token: "{{ token_encoded.stdout | trim }}"
    delegate_to: "{{ item }}"
    with_items: "{{ play_hosts }}"
    run_once: true
  when: not token_presence.stat.exists

- name: Update "{{ etc_path }}/config.yaml" on the control-planes
  template:
    src: "config.yaml.j2"
    dest: "{{ etc_path }}/config.yaml"
    mode: 0640

- name: Update "{{ etc_path }}/config.yaml" on {{ groups['control_plane'][0]['inventory_hostname_short'] }}
  template:
    src: "config.yaml.j2"
    dest: "{{ etc_path }}/config.yaml"
    mode: 0640
  when: inventory_hostname in groups['control_plane'][0]
  vars:
    args_list:
      node-name: "{{ ansible_hostname }}"
      token: "{{ token }}"

- name: Update "{{ etc_path }}/config.yaml" on the control-planes
  template:
    src: "config.yaml.j2"
    dest: "{{ etc_path }}/config.yaml"
    mode: 0640
  when: inventory_hostname in groups['control_plane'] and inventory_hostname not in groups['control_plane'][0]
  vars:
    args_list:
      node-name: "{{ ansible_hostname }}"
      server: "https://{{ groups['control_plane'][0] }}:6443"
      token: "{{ token }}"

- name: Update "{{ etc_path }}/config.yaml" on the non-control-planes
  template:
    src: "config.yaml.j2"
    dest: "{{ etc_path }}/config.yaml"
    mode: 0640
  when: inventory_hostname not in groups['control_plane']
  vars:
    args_list:
      node-name: "{{ ansible_hostname }}"
      server: "https://{{ round_robin_dns | default(groups['control_plane'][0]) }}:6443"
      token: "{{ token }}"

- name: Update "{{ etc_path }}/audit.yml"
  template:
    src: "audit.yml.j2"
    dest: "{{ etc_path }}/audit.yml"
    mode: 0640
  when: audit_rules is defined

- name: Update "{{ var_path }}/kublet-config.yml"
  template:
    src: "kublet-config.yml.j2"
    dest: "{{ var_path }}/kublet-config.yml"
    mode: 0640
  when: kublet_args is defined

- name: Create "{{ etc_path }}/config.yaml.d" folder
  ansible.builtin.file:
    path: "{{ etc_path }}/config.yaml.d"
    state: directory

- name: Update "{{ etc_path }}/config.yaml.d/node.yaml" file
  template:
    src: "config.yaml.j2"
    dest: "{{ etc_path }}/config.yaml.d/node.yaml"
    mode: 0640
  vars:
    args_list: "{{ config_yaml_contents }}"
